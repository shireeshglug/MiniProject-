# -*- coding: utf-8 -*-
"""Mini Project #1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JPWKijctblMEfHJkmwUA4BiHqDLPKBMu

**Facial Emotion Recognition  Mini Project   -- Team Targaryen** 

---
"""

#Import the dataset from the Google Drive  


from google.colab import drive
drive.mount('/content/drive')



"""**Training the neural network**"""

#--------------------------Importing Libraries ---------------------------------
import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, AveragePooling2D
from keras.layers import Dense, Activation, Dropout, Flatten

from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator

import numpy as np
import matplotlib.pyplot as plt

#----------------------------- End ---------------------------------------------



#-----------------------Data Preprocessing -------------------------------------

with open("drive/My Drive/fer2013.csv") as f:
    content = f.readlines()

lines = np.array(content)

num_of_instances = lines.size

num_classes = 7 #angry, disgust, fear, happy, sad, surprise, neutral
batch_size = 128
epochs = 200

#initialize trainset and test set
x_train, y_train, x_test, y_test = [], [], [], []




#transfer train and test set data
for i in range(1,num_of_instances):
    try:
        emotion, img, usage = lines[i].split(",")
          
        val = img.split(" ")
            
        pixels = np.array(val, 'float32')
        
        emotion = keras.utils.to_categorical(emotion, num_classes)
    
        if 'Training' in usage:
            y_train.append(emotion)
            x_train.append(pixels)
        elif 'PublicTest' in usage:
            y_test.append(emotion)
            x_test.append(pixels)
    except:
	    print("",end="")

#------------------------------


#data transformation for train and test sets

x_train = np.array(x_train, 'float32')
y_train = np.array(y_train, 'float32')
x_test = np.array(x_test, 'float32')
y_test = np.array(y_test, 'float32')

x_train /= 255 #normalize inputs between [0, 1]
x_test /= 255

x_train = x_train.reshape(x_train.shape[0], 48, 48, 1)
x_train = x_train.astype('float32')
x_test = x_test.reshape(x_test.shape[0], 48, 48, 1)
x_test = x_test.astype('float32')

print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

#------------------------------
#construct CNN structure
model = Sequential()

#1st convolution layer
model.add(Conv2D(64, (5, 5), activation='relu', input_shape=(48,48,1)))
model.add(MaxPooling2D(pool_size=(5,5), strides=(2, 2)))

#2nd convolution layer
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(AveragePooling2D(pool_size=(3,3), strides=(2, 2)))

#3rd convolution layer
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(AveragePooling2D(pool_size=(3,3), strides=(2, 2)))

model.add(Flatten())

#fully connected neural networks
model.add(Dense(1024, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(1024, activation='relu'))
model.add(Dropout(0.2))

model.add(Dense(num_classes, activation='softmax'))
#------------------------------
#batch process
gen = ImageDataGenerator()
train_generator = gen.flow(x_train, y_train, batch_size=batch_size)

#------------------------------

model.compile(loss='categorical_crossentropy'
    , optimizer=keras.optimizers.Adam()
    , metrics=['accuracy']
)

#------------------------------



# Here ends the training of the model ------------------------------------------



# Fitting the model 

fit = True

if fit == True:
	#model.fit_generator(x_train, y_train, epochs=epochs) #train for all trainset
	model.fit_generator(train_generator, steps_per_epoch=batch_size, epochs=epochs) #train for randomly selected one
else:
	model.load_weights('/data/facial_expression_model_weights.h5') #load weights
	


  
# saving the files   
  
# fname = "weights-Test-CNN.hdf5"
# model.save_weights(fname,overwrite=True)

''' End of modeling training '''

score = model.evaluate(x_test, y_test,verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', 100*score[1])


# def emotion_analysis(emotions):
#     objects = ('angry', 'disgust', 'fear', 'happy', 'sad', 'surprise', 'neutral')
#     y_pos = np.arange(len(objects))
    
#     plt.bar(y_pos, emotions, align='center', alpha=0.5)
#     plt.xticks(y_pos, objects)
#     plt.ylabel('percentage')
#     plt.title('emotion')
    
#     plt.show()
# #------------------------------

# monitor_testset_results = False

# if monitor_testset_results == True:
# 	#make predictions for test set
# 	predictions = model.predict(x_test)

# 	index = 0
# 	for i in predictions:
# 		if index < 30 and index >= 20:
# 			#print(i) #predicted scores
# 			#print(y_test[index]) #actual scores
			
# 			testing_img = np.array(x_test[index], 'float32')
# 			testing_img = testing_img.reshape([48, 48]);
			
# 			plt.gray()
# 			plt.imshow(testing_img)
# 			plt.show()
			
# 			print(i)
			
# 			emotion_analysis(i)
# 			print("----------------------------------------------")
# 		index = index + 1

# #------------------------------
# #make prediction for custom image out of test set

# img = image.load_img("TestCase.jpeg", grayscale=True, target_size=(48, 48))

# x = image.img_to_array(img)
# x = np.expand_dims(x, axis = 0)

# x /= 255

# custom = model.predict(x)
# emotion_analysis(custom[0])

# x = np.array(x, 'float32')
# x = x.reshape([48, 48]);

# plt.gray()
# # plt.imshow(x)
# plt.show()
# #------------------------------

# %matplotlib inline
# import numpy as np
# from matplotlib import pyplot as plt
# import cv2


# # image = cv2.imread('images/input.jpg')
# # plt.imshow(image)
# # plt.show()




# image = cv2.imread('TestCase.jpeg')
# face_csc = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

# faces  = face_csc.detectMultiScale(gray,1.1,4)


# for(x,y,w,h) in faces :
#     cv2.rectangle(image,(x,y),(x+w,y+h),(0,255,0),3)

# plt.imshow(image)

# cv2.waitKey(0)

# ------------------------Testing the accuracy ---------------------------------

score = model.evaluate(x_test, y_test,verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', 100*score[1])